@page "/productionreport"
@using NatuurlikBase.Repository.IRepository

@inject ISearchProductionTransactionsRepository SearchProductTransactionsUseCase
@inject IJSRuntime JSRuntime

<h3>Production Report</h3>
<br/>

<div id="printarea">
<div class="row">
   
    <div class="col">
        <label for="df">Date From</label>
        <input type="date" id="df" class="form-control" @bind-value="dateFrom" />
    </div>
    <div class="col">
        <label for="dt">Date To</label>
        <input type="date" id="dt" class="form-control" @bind-value="dateTo" />
    </div>

     <div class="col">
        <label for="inv">Search By Product Name</label>
        <input type="text" id="inv" class="form-control" @bind-value="prodName" />
    </div>

    <div class="col">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-success form-control" @onclick="SearchProducts">Generate Report</button>
    </div>
</div>

<br/>
@if (productTransactions != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Produced</th>
                <th>Qty Before</th>
                <th>Qty Produced</th>
                <th>Qty After</th> 
                <th>Transaction Date</th>
                
            </tr>
        </thead>
        <tbody>
            @foreach(var pt in productTransactions)
            {
                    var quantityProduced = pt.QuantityAfter - pt.QuantityBefore;
                    <tr>
                    
                    <td>@pt.Product.Name</td>
                    <td>@pt.QuantityBefore</td>
                    <td>@quantityProduced</td>
                    <td>@pt.QuantityAfter</td>
                    <td>@pt.TransactionDate.ToString("MM/dd/yyyy")</td>
                </tr>
            }
        </tbody>
    </table>
}
</div>

@code {
    private string prodName;
    private DateTime? dateFrom;
    private DateTime? dateTo;
    private int activityTypeId = 0;
    private IEnumerable<ProductionTransaction> productTransactions;

    private async Task SearchProducts()
    {
        ProductTransactionType? productTransactionType = null;
        if (activityTypeId != 0) productTransactionType = (ProductTransactionType)activityTypeId;

        productTransactions = await SearchProductTransactionsUseCase.ExecuteAsync(
            prodName,
            dateFrom,
            dateTo,
            productTransactionType);    
    }
}
