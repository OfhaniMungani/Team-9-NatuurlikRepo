@using NatuurlikBase.Repository.IRepository

@inject IViewConfiguredProductsByName SearchProductsByName

<div class="input-group">
    <input type="text" 
        class="form-control form-control" 
        style="max-width:550px"
        placeholder="Enter Name of Product to Search"
        @bind-value="productNameToSearch" 
        @bind-value:event="oninput"
        />    
    <button type="button" class="input-group-text mx-1" 
        @onclick="@( async()=> { await ViewProducts(); } )">Search</button>

</div>
@if (this.DisplaySearchResult 
    && _products != null
    && selectedProduct == null)
{
    <div style="overflow-y:auto; max-height:200px; width:510px; border:1px solid silver; padding-top:5px">
        <ul style="list-style-type:none">
            @foreach(var product in _products)
            {
                <li style="cursor:pointer; font-weight:normal;" @onclick="@(async() => { await SelectProduct(product); })"
                    @key="product.Product.Id">@product.Product.Name</li>
                    
            }
        </ul>
    </div>
}

@code {

    private string? _searchByProductName;


    public string productNameToSearch
    {
        get => _searchByProductName;
        set
        {
            _searchByProductName = value;
            if (!string.IsNullOrWhiteSpace(_searchByProductName) &&
                //more than three characters have been typed
                _searchByProductName.Length > 3)
            {
                ViewProducts();
            }
        }
    }

    private List<ProductInventory>? _products;
    private ProductInventory? selectedProduct;

    [Parameter]
    public EventCallback<List<ProductInventory>> OnSearchProducts{ get; set; }



    [Parameter]
    public EventCallback<ProductInventory> OnSelectProduct { get; set; }

    private async Task SelectProduct(ProductInventory product)
    {
        await OnSelectProduct.InvokeAsync(product);
        selectedProduct = product;
        _searchByProductName = "";
    }

    [Parameter]
    public bool DisplaySearchResult { get; set; } = false;

    private async Task ViewProducts()
    {


        var products = (await SearchProductsByName
            .ExecuteSearchAsync(productNameToSearch??string.Empty))?.ToList();

        //await search results and populate
        await OnSearchProducts.InvokeAsync(products);
        _products = products;

        //Initialize product search list box.
        this.selectedProduct = null;
        //Product has been selected
        StateHasChanged();
    }

}
