@model InventoryProcured

@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";    
}

<div id="page-content-wrapper">
<div>
            <div class="card">
                <div class="card-header" style="background-color: #F2F2F2">
                    <h5>Procured Inventory Item Details</h5>
                </div>
<div>
    
     <div class="card-body">
        <div class="deldetails">
            <div class="col">
                <label> <strong>Company Name :</strong>  @Html.DisplayFor(model => model.Supplier.CompanyName)</label> 
            </div> 
            <div class="col">
                <label> <strong>Invoice Number :</strong>  @Html.DisplayFor(model => model.InvoiceNo)</label> 
            </div> 
            <div class="col">
                <label> <strong>Inventory Item :</strong>  @Html.DisplayFor(model => model.InventoryItem.InventoryItemName)</label> 
            </div> 
            <div class="col">
                <label> <strong>Quantity Received  :</strong>  @Html.DisplayFor(model => model.QuantityReceived)</label> 
            </div>  
            <div class="col">
                <label> <strong>Date Logged :</strong>  @Html.DisplayFor(model => model.DateLogged)</label> 
            </div>   
             @*<div class="col">
                <label> <strong>Supplier Invoice :</strong>  <input type="button" id="btnPreview" value="Preview PDF Document" onclick="LoadPdfFromUrl("@Model.InvoiceFile") /></label> 
            </div>   
            <hr/>
            <div id="pdf_container"></div>*@
        </div>
            <div class="col">            
               <a asp-controller="InventoryProcured" asp-action="Index" class="btn btn-outline-dark" style="width:150px;"> Return </a>
            </div>
</div>

       </div>
                </div>
            </div>
             <div class="modal fade" id="exampleModal">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header border-0">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>

                    </div>
                    <div class="modal-body">
                        <h6 class="col-md-10"> 
                       Confirm Supplier Deletion
                    </h6>
                    </div>

                    <div class="modal-footer border-0">
                         <form asp-action="Delete">
                        <input type="hidden" asp-for="Id" />
                        <div class="form-actions no-color">
                            <input type="submit" value="Confirm" class="btn btn-danger" style="width:150px;"/> 
                            <button type="button" class="btn btn btn-outline-dark" data-dismiss="modal" style="width:150px;">Close</button>
                        </div>
                              
                    </form>
                    </div>

                </div>
            </div>
        </div>

</div>



 @section scripts{
   
    @if (ViewBag.Confirmation != null)
    {
        <script>



            $(function () {
                $("#exampleModal").modal("show");
            });


        </script>
    }

    <script type="text/javascript">
        var pdfjsLib = window['pdfjs-dist/build/pdf'];
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.6.347/pdf.worker.min.js';
        var pdfDoc = null;
        var scale = 1; //Set Scale for zooming PDF.
        var resolution = 1; //Set Resolution to Adjust PDF clarity.
 
        function LoadPdfFromUrl(url) {
            //Read PDF from URL.
            pdfjsLib.getDocument(url).promise.then(function (pdfDoc_) {
                pdfDoc = pdfDoc_;
 
                //Reference the Container DIV.
                var pdf_container = document.getElementById("pdf_container");
                pdf_container.style.display = "block";
 
                //Loop and render all pages.
                for (var i = 1; i <= pdfDoc.numPages; i++) {
                    RenderPage(pdf_container, i);
                }
            });
        };
        function RenderPage(pdf_container, num) {
            pdfDoc.getPage(num).then(function (page) {
                //Create Canvas element and append to the Container DIV.
                var canvas = document.createElement('canvas');
                canvas.id = 'pdf-' + num;
                ctx = canvas.getContext('2d');
                pdf_container.appendChild(canvas);
 
                //Create and add empty DIV to add SPACE between pages.
                var spacer = document.createElement("div");
                spacer.style.height = "20px";
                pdf_container.appendChild(spacer);
 
                //Set the Canvas dimensions using ViewPort and Scale.
                var viewport = page.getViewport({ scale: scale });
                canvas.height = resolution * viewport.height;
                canvas.width = resolution * viewport.width;
 
                //Render the PDF page.
                var renderContext = {
                    canvasContext: ctx,
                    viewport: viewport,
                    transform: [resolution, 0, 0, resolution, 0, 0]
                };
 
               page.render(renderContext);
            });
        };
    </script>
}
